<?xml version="1.0" encoding="UTF-8"?>
<!-- ↑ XML 헤더(반드시 첫 번째 줄에 위치) -->

<!-- dtd선언 -->
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
    
<mapper namespace="member">
	
	<insert id="memberjoin">
		insert into member(member_id, member_pw, member_nick, member_point, member_email, member_agree, member_join, member_level, member_login)
		values(#{memberId}, #{memberPw}, #{memberNick}, 0, #{memberEmail}, 'Y', sysdate, '일반회원', null)
	</insert>

	<select id="selectOne" resultType="MemberDto">
		SELECT m.*, p.ATTACHMENT_NO
FROM member m
LEFT JOIN member_profile_image p ON m.MEMBER_ID = p.MEMBER_ID where p.member_id = #{memberId};
	</select>

	<!-- 관리자 회원 목록 조회 -->
	<select id="selectList" resultType="MemberProfileFollowDto">
		<bind name="memberIdExist" value="memberId != null and !memberId.equals('')"/>
		<bind name="memberNickExist" value="memberNick != null and !memberNick.equals('')"/>
		<bind name="minPointExist" value="minPoint != null"/>
    	<bind name="maxPointExist" value="maxPoint != null"/>
		<bind name="memberEmailExist" value="memberEmail != null and !memberEmail.equals('')"/>
		<bind name="memberAgreeListExist" value="memberAgreeList != null and memberAgreeList.size() > 0"/>
		<bind name="beginJoinDateExist" value="beginJoinDate != null and !beginJoinDate.equals('')"/>
    	<bind name="endJoinDateExist" value="endJoinDate != null and !endJoinDate.equals('')"/>
		<bind name="memberLevelListExist" value="memberLevelList != null and memberLevelList.size() > 0"/>
		<bind name="searchLoginDaysExist" value="searchLoginDays != null"/>
		<bind name="orderListExist" value="orderList != null and orderList.size() > 0"/>

		select * from member 
			left join member_profile_image 
			on member.member_id = member_profile_image.member_id
			left join member_follow_cnt
			on member.member_id = member_follow_cnt.member_id
		<!-- 조건절 -->
		<where>
			<!-- 아이디 -->
			<if test="memberIdExist">
			and instr(member.member_id, #{memberId}) > 0
			</if>
			<!-- 닉네임 -->
			<if test="memberNickExist">
			and instr(member.member_nick, #{memberNick}) > 0
			</if>

		<!-- 이메일 -->
		<if test="memberEmailExist">
		and instr(member.member_email, #{memberEmail}) > 0
		</if>
		<!-- 
		(주의) XML은 태그 형식을 사용하므로 부등호 사용 부가
		(해결) 해석을 하지 않는 영역을 생성(CDATA 영역)
		-->
		<!-- 
		등급
		* 등급은 여러 개 있을 수 있으므로 in 구문으로 조회
		* 데이터 개수만큼 in 구문을 완성하도록 foreach 사용
		-->
		<if test="memberLevelListExist">
		<!-- and (member_level == '일반회원' or member_level == '우수회원') -->
		and member.member_level in 
		<foreach collection="memberLevelList" 
			open="(" close=")" item="memberLevel" separator=",">
			#{memberLevel}
		</foreach>
		</if>

		<if test="memberAgreeListExist">
		<!-- and (member_level == '일반회원' or member_level == '우수회원') -->
		and member.member_agree in 
		<foreach collection="memberAgreeList" 
			open="(" close=")" item="memberAgree" separator=",">
			#{memberAgree}
		</foreach>
		</if>

		<!--  
		포인트 : 구간
		* 최소포인트(minPoint)와 최대포인트(maxPoint)를 이용하여 구간검색을 진행
		* 총 3가지 경우(최소만, 최대만, 둘다)를 처리

		* choose구문 사용
		-->
		<choose>
		<when test="minPointExist and maxPointExist">
			and member.member_point between #{minPoint} and #{maxPoint}
		</when>
		<when test="minPointExist">
			and member.member_point >= #{minPoint}
		</when>
		<when test="maxPointExist">
			<![CDATA[
			and member.member_point <= #{maxPoint}
			]]>
		</when>
		<otherwise></otherwise>
		</choose>

		<!-- 
		가입일 : 기간 검색
		(주의)날짜만 들어오므로 시간은 추가해줘야 한다 
		-->
		<choose>
		<when test="beginJoinDateExist  and  endJoinDateExist">
			and member.member_join between 
			to_date(#{beginJoinDate}||' '||'00:00:00', 'YYYY-MM-DD HH24:MI:SS')
			and 
			to_date(#{endJoinDate}||' '||'23:59:59', 'YYYY-MM-DD HH24:MI:SS')
		</when>
		<when test="beginJoinDateExist">
			and member.member_join >= to_date(#{beginJoinDate}||' '||'00:00:00', 'YYYY-MM-DD HH24:MI:SS')
		</when>
		<when test="endJoinDateExist">
			<![CDATA[
			and member.member_join <= to_date(#{endJoinDate}||' '||'23:59:59', 'YYYY-MM-DD HH24:MI:SS')
			]]>
		</when>
		<otherwise></otherwise>
		</choose>


		<!-- 로그인 : 최근 ?일 검색 -->
		<if test="searchLoginDaysExist">
		<!-- 방법1: 날짜만 뺄셈으로 변경(시간이 유지되서 만나이처럼 됨) -->
		<!-- and member_login between sysdate-#{searchLoginDays} and sysdate -->

		<!-- 방법2 : 날짜를 뺄셈으로 구한 뒤 시간을 자정으로 변경 -->
		and member.member_login between 
		to_date(
			to_char(sysdate-#{searchLoginDays}, 'YYYY-MM-DD'),
			'YYYY-MM-DD'
		)
		and
		sysdate
		</if>
		</where>
		<!-- 
		정렬
		* 있을 수도, 없을 수도, 많을 수도 있다.
		* foreach로 처리

		order by 항목1 asc/desc, 항목2 asc/desc, ...
		-->
		<if test="orderListExist">
		order by
		<foreach collection="orderList" item="order" separator=",">
			${order}
		</foreach>
		</if>
	</select>
	

	
	
	<!-- 충전: 유저의 포인트 증가 -->
	<update id="chargePoint">
	  UPDATE member 
	  SET member_point = member_point + #{paymentTotal} 
	  WHERE member_id = #{memberId}
	</update>
			

	<!-- 충전취소: 포인트 차감 -->
	<update id="decreasePoint">
	  UPDATE member 
	  SET member_point =  member_point - #{paymentTotal} 
	  WHERE member_id = #{memberId}
	</update>
	
	
	<!-- 펀딩 시 포인트 차감 -->
	<update id="minusPoint">
	  UPDATE member 
	  SET member_point =  member_point - #{fundPrice} 
	  WHERE member_id = #{memberId}
	</update>
	
	
		
	<!-- 펀딩 취소 시 포인트 돌려받음 -->
	<update id="plusPoint">
	  UPDATE member 
	  SET member_point =  member_point + #{fundPrice} 
	  WHERE member_id = #{memberId}
	</update>
	
	
	
	
	
	<delete id="delete">
		delete member where member_id = #{memberId}
	</delete>
	
	
	
	<update id="password">
		update member set member_pw=#{memberPw} where member_id=#{memberId}
	</update>
	
	<update id="editPassword">
		update member set member_pw=#{memberPw} where member_email=#{memberEmail}
	</update>
	
	<update id="nickname">
		update member set member_nick=#{memberNick} where member_id=#{memberId}
	</update>
	
	<update id="exitDate">
		update member set member_exitdate=sysdate where member_id=#{memberId}
	</update>
	
	<update id="cancelExit">
		update member set member_exitdate=null where member_id=#{memberId}
	</update>
	
		<delete id="clean">
			<![CDATA[
			delete member where member_exitdate < sysdate - sysdate - INTERVAL '14' DAY
			]]>
		</delete>
	
	<select id="findId" resultType="MemberDto">
		select member_id from member where member_email=#{memberEmail}
	</select>
	
	<select id="selectAll" resultType="MemberDto">
		select * from member
	</select>
	
	<select id="joinNick" resultType="MemberDto">
		select * from member where member_nick=#{memberNick}
	</select>
	
	<select id="joinEmail" resultType="MemberDto">
		select * from member where member_email=#{memberEmail}
	</select>
	
	<select id="idDuplicatedCheck" resultType="int">
		select count(*) from member where member_id=#{memberId}
	</select>
	
	<select id="nickDuplicatedCheck" resultType="int">
		select count(*) from member where member_nick=#{memberNick}
	</select>
	
	<select id="emailDuplicatedCheck" resultType="int">
		select count(*) from member where member_email=#{memberEmail}
	</select>
	
	<select id="emailExist" resultType="MemberDto">
		select * from member where member_id=#{memberId}
	</select>
	
	<update id="deleteMemberProc" statementType="CALLABLE">
	  { CALL delete_member_proc(p_member_id=#{memberId}) }
	</update>
	
	<select id="followCnt" resultType="MemberFollowCntDto">
		select * from member_follow_cnt where member_id=#{memberId}
	</select>
	
	<insert id="memberExit">
		insert into member_exit(member_id)
		values(#{memberId})
	</insert>
	
	<select id="memberExitFind" resultType="int">
		select count(*) from member_exit where member_id = #{memberId}
	</select>
	
	<!-- 팔로우 리스트 멤버별 프로필 조회 -->
	<select id="followListProfile" resultType="FollowDto">
		SELECT f.FOLLOW_TARGET_PRIMARY_KEY, mpi.ATTACHMENT_NO, f.follow_no
		FROM FOLLOW f
		LEFT JOIN MEMBER_PROFILE_IMAGE mpi ON f.FOLLOW_TARGET_PRIMARY_KEY = mpi.MEMBER_ID
		WHERE f.MEMBER_ID = #{memberId} and f.follow_target_type='회원'
	</select>
	
	<!-- 팔로워 리스트 멤버별 프로필 조회 -->
	<select id="followerListProfile" resultType="FollowDto">
		SELECT f.member_id, mpi.ATTACHMENT_NO, f.follow_no
		FROM FOLLOW f
		LEFT JOIN MEMBER_PROFILE_IMAGE mpi ON f.member_id = mpi.MEMBER_ID
		WHERE f.follow_target_primary_key=#{followTargetPrimaryKey} AND f.follow_target_type = '회원'
	</select>
	
	<!-- 페이지 리스트 멤버별 프로필 조회 -->
	<select id="PageListProfile" resultType="FollowDto">
		SELECT  f.*,a.ARTIST_NO, a.ARTIST_NAME, a.ARTIST_ENG_NAME, a.ARTIST_ENG_NAME_LOWER, p.ATTACHMENT_NO
FROM follow f
JOIN artist a ON f.follow_target_primary_key = a.ARTIST_ENG_NAME_LOWER
JOIN artist_profile p ON a.ARTIST_NO = p.ARTIST_NO
WHERE f.follow_target_type = '대표페이지' AND f.member_id = #{memberId}
	</select>
	
	<!-- 팔로우 리스트 삭제 -->
	<delete id="deleteFollow">
		DELETE FROM follow WHERE FOLLOW_NO = #{followNo}
	</delete>
	
	 <!-- 프로필 생성 -->
    <insert id="insertProfile">
        insert into member_profile_image (member_id, attachment_no) values (#{memberId}, #{attachmentNo})
    </insert>
     <!--프로필 조회 -->
    <select id="selectOneProfile" resultType="MemberProfileImageDto">
        select * from member_profile_image where member_id = #{memberId}
    </select>
     <!-- 프로필 수정 -->
    <update id="updateProfile">
        update member_profile_image set attachment_no = #{attachmentNo} where member_id = #{memberId}
    </update>
    <!-- 프로필 삭제 -->
    <delete id="deleteProfile">
        delete from member_profile_image where member_id = #{memberId}
    </delete>
	
	<!-- (채팅) 회원 아이디 리스트로 상세조회 -->
	<select id="chatMembers" resultType="MemberDto">
		select member_id, member_nick from member where member_id in
		<foreach collection="list" item="member" open="(" close=")" separator=",">
			#{member}
		</foreach>
	</select>
		
</mapper>